class MergeSortTracker:
    def __init__(self):
        self.comparisons = 0
        self.swaps = 0

    def merge_sort(self, arr):
        if len(arr) > 1:
            mid = len(arr) // 2
            left_half = arr[:mid]
            right_half = arr[mid:]

            self.merge_sort(left_half)
            self.merge_sort(right_half)

            i = j = k = 0
            while i < len(left_half) and j < len(right_half):
                self.comparisons += 1
                if left_half[i] < right_half[j]:
                    arr[k] = left_half[i]
                    i += 1
                else:
                    arr[k] = right_half[j]
                    j += 1
                self.swaps += 1
                k += 1

            while i < len(left_half):
                arr[k] = left_half[i]
                i += 1
                k += 1
                self.swaps += 1

            while j < len(right_half):
                arr[k] = right_half[j]
                j += 1
                k += 1
                self.swaps += 1

    def print_complexity(self):
        print(f"Comparisons: {self.comparisons}")
        print(f"Swaps: {self.swaps}")

# Example usage
arr = [12, 11, 13, 5, 6, 7]
tracker = MergeSortTracker()
tracker.merge_sort(arr)
print("Sorted array:", arr)
tracker.print_complexity()
